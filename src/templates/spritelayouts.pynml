<!--!
  This file is part of FIRS Industry Set for OpenTTD.
  FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
  FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
-->
<tal:block define="temp_storage global_constants.temp_storage_graphics_chain">
<!--! ^ I don't like the indirection of temp_storage, but 'global_constants.temp_storage_graphics_chain' makes calculations below even harder to read than otherwise so shorten it -->
    <tal:spritelayouts repeat="spritelayout python:industry.spritelayouts">
        spritelayout ${spritelayout.id} {
            <tal:optional_terrain_aware_ground condition="spritelayout.terrain_aware_ground">
                <!--! we don't draw terrain (and climate) aware ground unless explicitly required by the spritelayout, it makes nml compiles slower -->
                <!--!
                    moving the climate + terrain expressions to a switch and temp registers
                    would likely compile a couple of seconds faster (did when tested roughly), nml docs have examples
                -->
                ground {
                    sprite: GROUNDSPRITE_NORMAL ;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                }
                childsprite {
                    sprite: GROUNDSPRITE_DESERT;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_TROPIC) || (climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT);
                }
                childsprite {
                    sprite: GROUNDSPRITE_DESERT_1_2;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_TROPIC) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT)) || ((climate == CLIMATE_TROPIC) && (nearby_tile_terrain_type(0, 0) == TILETYPE_NORMAL) && ((nearby_tile_terrain_type( 1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type(-1, 0) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0, 1) != TILETYPE_DESERT) && (nearby_tile_terrain_type( 0,-1) != TILETYPE_DESERT) ) );
                }
                childsprite {
                    sprite: GROUNDSPRITE_SNOW_4_4;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && (nearby_tile_height(0, 0) < (snowline_height + 2));
                }
                childsprite {
                    sprite: GROUNDSPRITE_SNOW_3_4;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 2)));
                }
                childsprite {
                    sprite: GROUNDSPRITE_SNOW_2_4;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height + 0)) || (nearby_tile_height(0, 0) >= (snowline_height + 1)));
                }
                childsprite {
                    sprite: GROUNDSPRITE_SNOW_1_4;
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    always_draw: 1;
                    hide_sprite: (climate != CLIMATE_ARCTIC) || (climate == CLIMATE_ARCTIC) && ((nearby_tile_height(0, 0) < (snowline_height - 1)) || (nearby_tile_height(0, 0) >= (snowline_height + 0)));
                }
            </tal:optional_terrain_aware_ground>

            // Industry-specific ground (snow aware)
            // non-snow
            childsprite {
                sprite: ${industry.unpack_sprite_or_spriteset(spritelayout.ground_sprite)};
                recolour_mode: RECOLOUR_REMAP;
                palette: PALETTE_USE_DEFAULT;
                hide_sprite: (LOAD_TEMP(${temp_storage.var_terrain_is_snow}));
                always_draw: 1;
            }
            childsprite {
                sprite: ${industry.unpack_sprite_or_spriteset(spritelayout.ground_overlay)};
                recolour_mode: RECOLOUR_REMAP;
                palette: PALETTE_USE_DEFAULT;
                hide_sprite: (LOAD_TEMP(${temp_storage.var_terrain_is_snow}));
                always_draw: 1;
            }
            // snow
            childsprite {
                sprite: ${industry.unpack_sprite_or_spriteset(spritelayout.ground_sprite, terrain_type='snow')};
                recolour_mode: RECOLOUR_REMAP;
                palette: PALETTE_USE_DEFAULT;
                hide_sprite: (!LOAD_TEMP(${temp_storage.var_terrain_is_snow}));
                always_draw: 1;
            }
            childsprite {
                sprite: ${industry.unpack_sprite_or_spriteset(spritelayout.ground_overlay, terrain_type='snow')};
                recolour_mode: RECOLOUR_REMAP;
                palette: PALETTE_USE_DEFAULT;
                hide_sprite: (!LOAD_TEMP(${temp_storage.var_terrain_is_snow}));
                always_draw: 1;
            }
            <tal:optional_fence condition="'ne' in spritelayout.fences">
                // fences NE
                building {
                    sprite: 1302 + LOAD_TEMP(${temp_storage.var_fencesprite_ne});
                    hide_sprite: (LOAD_TEMP(${temp_storage.var_use_fence_ne}) == 0);
                    xoffset:  0;
                    yoffset:  0;
                    zoffset:  LOAD_TEMP(${temp_storage.var_fence_offset_ne}) * 8;
                    xextent: 1;
                    yextent: 16;
                    zextent: 6;
                    recolour_mode: RECOLOUR_REMAP;
                    palette:       PALETTE_USE_DEFAULT;
                }
            </tal:optional_fence>
            <tal:optional_fence condition="'nw' in spritelayout.fences">
                // fences NW
                building {
                    sprite: 1301 + LOAD_TEMP(${temp_storage.var_fencesprite_nw});
                    hide_sprite: (LOAD_TEMP(${temp_storage.var_use_fence_nw}) == 0);
                    xoffset:  0;
                    yoffset:  0;
                    zoffset:  LOAD_TEMP(${temp_storage.var_fence_offset_nw}) * 8;
                    xextent: 16;
                    yextent: 1;
                    zextent: 6;
                    recolour_mode: RECOLOUR_REMAP;
                    palette:       PALETTE_USE_DEFAULT;
                }
            </tal:optional_fence>

            <tal:optional_construction_sprites condition="industry.default_industry_properties.override_default_construction_states"
                                               repeat="building_sprite spritelayout.building_sprites">
                // construction states - optional (no snow awareness)
                building {
                    sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=0)};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${building_sprite.xoffset};
                    yoffset: ${building_sprite.yoffset};
                    zoffset: ${building_sprite.zoffset};
                    xextent: ${building_sprite.xextent};
                    yextent: ${building_sprite.yextent};
                    zextent: ${building_sprite.zextent};
                    always_draw: ${building_sprite.always_draw};
                    hide_sprite: (construction_state != 0);
                }
                building {
                    sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=1)};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${building_sprite.xoffset};
                    yoffset: ${building_sprite.yoffset};
                    zoffset: ${building_sprite.zoffset};
                    xextent: ${building_sprite.xextent};
                    yextent: ${building_sprite.yextent};
                    zextent: ${building_sprite.zextent};
                    always_draw: ${building_sprite.always_draw};
                    hide_sprite: (construction_state != 1);
                }
                building {
                    sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=2)};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${building_sprite.xoffset};
                    yoffset: ${building_sprite.yoffset};
                    zoffset: ${building_sprite.zoffset};
                    xextent: ${building_sprite.xextent};
                    yextent: ${building_sprite.yextent};
                    zextent: ${building_sprite.zextent};
                    always_draw: ${building_sprite.always_draw};
                    hide_sprite: (construction_state != 2);
                }
            </tal:optional_construction_sprites>
            <tal:date_variations repeat="date_variation_num range(len(industry.graphics_change_dates)+1)"><!--! +1 because we need to run repeat at least once -->
                <tal:build_building_sprites repeat="building_sprite spritelayout.building_sprites">
                    // buildings (snow aware)
                    building {
                        sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=3, date_variation_num=date_variation_num)};
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        xoffset: ${building_sprite.xoffset};
                        yoffset: ${building_sprite.yoffset};
                        zoffset: ${building_sprite.zoffset};
                        xextent: ${building_sprite.xextent};
                        yextent: ${building_sprite.yextent};
                        zextent: ${building_sprite.zextent};
                        always_draw: ${building_sprite.always_draw};
                        hide_sprite: (LOAD_TEMP(${255 - date_variation_num}));
                    }
                    building {
                        sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=3, terrain_type='snow', date_variation_num=date_variation_num)};
                        recolour_mode: RECOLOUR_REMAP;
                        palette: PALETTE_USE_DEFAULT;
                        xoffset: ${building_sprite.xoffset};
                        yoffset: ${building_sprite.yoffset};
                        zoffset: ${building_sprite.zoffset};
                        xextent: ${building_sprite.xextent};
                        yextent: ${building_sprite.yextent};
                        zextent: ${building_sprite.zextent};
                        always_draw: ${building_sprite.always_draw};
                        hide_sprite: (LOAD_TEMP(${245 - date_variation_num}));
                    }
                </tal:build_building_sprites>
            </tal:date_variations>

            <tal:magic_trees condition="len(spritelayout.magic_trees) > 0" repeat="magic_tree spritelayout.magic_trees">
                // magic trees, magically added by industry.add_magic_spritelayout()
                building {
                    sprite: ${magic_tree.default};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${magic_tree.xoffset};
                    yoffset: ${magic_tree.yoffset};
                    <!--!zoffset: ${building_sprite.zoffset};-->
                    <!--! x and y extents need to be 4 or so for trees to prevent flickering -->
                    xextent: 4;
                    yextent: 4;
                    zextent: 32;
                    hide_sprite: climate == CLIMATE_TROPIC || nearby_tile_height(0, 0) >= snowline_height || construction_state == 0;
                }
                building {
                    sprite: ${magic_tree.tropic};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${magic_tree.xoffset};
                    yoffset: ${magic_tree.yoffset};
                    <!--!zoffset: ${building_sprite.zoffset};-->
                    xextent: 4;
                    yextent: 4;
                    zextent: 32;
                    hide_sprite: climate != CLIMATE_TROPIC || construction_state == 0;
                }
                building {
                    sprite: ${magic_tree.snow};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${magic_tree.xoffset};
                    yoffset: ${magic_tree.yoffset};
                    <!--!zoffset: ${building_sprite.zoffset};-->
                    xextent: 4;
                    yextent: 4;
                    zextent: 32;
                    hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height || construction_state == 0;
                }
            </tal:magic_trees>

            <tal:optional_smoke repeat="smoke_sprite spritelayout.smoke_sprites">
                // smoke sprites
                building {
                    sprite: ${smoke_sprite.sprite_number};
                    recolour_mode: RECOLOUR_REMAP;
                    palette: PALETTE_USE_DEFAULT;
                    xoffset: ${smoke_sprite.xoffset};
                    yoffset: ${smoke_sprite.yoffset};
                    zoffset: ${smoke_sprite.zoffset};
                    xextent: ${smoke_sprite.xextent};
                    yextent: ${smoke_sprite.yextent};
                    zextent: ${smoke_sprite.zextent};
                    hide_sprite: ${smoke_sprite.hide_sprite};
                }
            </tal:optional_smoke>

            <tal:optional_fence condition="'se' in spritelayout.fences">
                // fences SE
                building {
                    sprite: 1301 + LOAD_TEMP(${temp_storage.var_fencesprite_se});
                    hide_sprite: (LOAD_TEMP(${temp_storage.var_use_fence_se}) == 0);
                    xoffset: 0;
                    yoffset:  16;
                    zoffset:  LOAD_TEMP(${temp_storage.var_fence_offset_se}) * 8;
                    xextent: 16;
                    yextent: 1;
                    zextent: 6;
                    recolour_mode: RECOLOUR_REMAP;
                    palette:       PALETTE_USE_DEFAULT;
                }
            </tal:optional_fence>
            <tal:optional_fence condition="'sw' in spritelayout.fences">
                // fences SW
                building {
                    sprite: 1302 + LOAD_TEMP(${temp_storage.var_fencesprite_sw});
                    hide_sprite: (LOAD_TEMP(${temp_storage.var_use_fence_sw}) == 0);
                    xoffset: 16;
                    yoffset:  0;
                    zoffset:  LOAD_TEMP(${temp_storage.var_fence_offset_sw}) * 8;
                    xextent: 1;
                    yextent: 16;
                    zextent: 6;
                    recolour_mode: RECOLOUR_REMAP;
                    palette:       PALETTE_USE_DEFAULT;
                }
            </tal:optional_fence>

        }
    </tal:spritelayouts>
</tal:block>
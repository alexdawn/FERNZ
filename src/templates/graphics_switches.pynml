<!--!
  This file is part of FIRS Industry Set for OpenTTD.
  FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
  FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
-->

<tal:block define="temp_storage global_constants.temp_storage_graphics_chain">
<!--! ^ I don't like the indirection of temp_storage, but 'global_constants.temp_storage_graphics_chain' makes calculations below even harder to read than otherwise so shorten it -->
    <!--! industries can make use of optional extra graphics switches if needed -->
    <tal:extra_graphics_switches repeat="graphics_switch industry.extra_graphics_switches">
        <!--! if more extra graphics switch types are added, this would need conditional tal wrapped around each type -->
        switch(FEAT_INDUSTRYTILES, SELF, ${graphics_switch.id}, nearby_tile_slope(0,0)) {
            <tal:slope_spritelayout_mapping repeat="slope_spritelayout graphics_switch.slope_spritelayout_mapping.items()">
                ${slope_spritelayout[0]}: ${slope_spritelayout[1]};
            </tal:slope_spritelayout_mapping>
            ${graphics_switch.default_result};
        }
    </tal:extra_graphics_switches>

    <tal:industry_layouts_graphic_switches repeat="industry_layout python:industry.industry_layouts">
        switch(FEAT_INDUSTRYTILES, SELF, ${industry_layout.id}_graphics_switch, relative_pos) {
            <tal:build_industry_layout repeat="layout industry_layout.layout">
                relative_coord(${layout[0]}, ${layout[1]}): ${layout[3]};
            </tal:build_industry_layout>
            ${industry_layout.layout[0][3]}; // a default is needed, but should never be reached, layout definitions are explicit
        }
    </tal:industry_layouts_graphic_switches>

    switch(FEAT_INDUSTRYTILES, PARENT, ${industry.id}_industry_graphics_switch_layouts, layout_num) {
        <tal:available_industry_layouts repeat="layout_num range(len(industry.industry_layouts))">
            ${layout_num+1}: ${industry.industry_layouts[layout_num].id}_graphics_switch;
        </tal:available_industry_layouts>
        ${industry.industry_layouts[0].id}_graphics_switch; // default
    }

    switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_industry_construction_state_graphics_switch, construction_state) {
        0..2: ${industry.get_switch_name_for_construction_states()};
        ${industry.id}_industry_graphics_switch_layouts; // default
    }

    switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_store_temp_vars,
            [STORE_TEMP(terrain_type == TILETYPE_SNOW, ${temp_storage.var_terrain_is_snow})
                <tal:date_variations repeat="date_variation_num range(len(industry.graphics_change_dates)+1)"><!--! +1 because we need to run repeat at least once -->
                    , STORE_TEMP(${industry.get_date_conditions_for_hide_sprites(repeat.date_variation_num.index)},
                                 ${255 - date_variation_num}) <!--! dangerous counting down for these registers :D -->
                    , STORE_TEMP(construction_state != 3 ? 1 : LOAD_TEMP(${255 - date_variation_num}),
                                 ${255 - date_variation_num})
                    , STORE_TEMP(LOAD_TEMP(${temp_storage.var_terrain_is_snow}) == 0 ? 1 : LOAD_TEMP(${255 - date_variation_num}), <!--! copy a register for snow case -->
                                 ${245 - date_variation_num}) <!--! eh, these count down from 245, max 10 date variations is plenty -->
                    , STORE_TEMP(LOAD_TEMP(${temp_storage.var_terrain_is_snow}) == 1 ? 1 : LOAD_TEMP(${255 - date_variation_num}), <!--! non-snow case -->
                                 ${255 - date_variation_num})
                </tal:date_variations>
            ]) {
        ${industry.id}_industry_construction_state_graphics_switch; // default
    }

    switch(FEAT_INDUSTRYTILES, PARENT, ${industry.id}_industry_master_graphics_switch, STORE_TEMP(random_bits, ${temp_storage.var_random_bits})) {
        ${industry.id}_store_temp_vars; // default
    }

    <!--! fence switches -->
    switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_fence_station, [
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_ne}) * (nearby_tile_class(-1,  0) != TILE_CLASS_STATION), ${temp_storage.var_use_fence_ne}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_nw}) * (nearby_tile_class( 0, -1) != TILE_CLASS_STATION), ${temp_storage.var_use_fence_nw}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_se}) * (nearby_tile_class( 0,  1) != TILE_CLASS_STATION), ${temp_storage.var_use_fence_se}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_sw}) * (nearby_tile_class( 1,  0) != TILE_CLASS_STATION), ${temp_storage.var_use_fence_sw}),
            ]) {
        ${industry.id}_industry_master_graphics_switch;
    }

    switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_fence_industry, [
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_ne}) * !nearby_tile_is_same_industry(-1,  0), ${temp_storage.var_use_fence_ne}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_nw}) * !nearby_tile_is_same_industry( 0, -1), ${temp_storage.var_use_fence_nw}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_se}) * !nearby_tile_is_same_industry( 0,  1), ${temp_storage.var_use_fence_se}),
                STORE_TEMP(LOAD_TEMP(${temp_storage.var_use_fence_sw}) * !nearby_tile_is_same_industry( 1,  0), ${temp_storage.var_use_fence_sw}),
            ]) {
        ${industry.id}_tile_fence_station;
    }

    switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_fences, [
                STORE_TEMP(0, ${temp_storage.var_fencesprite_ne}),
                STORE_TEMP(0, ${temp_storage.var_fencesprite_nw}),
                STORE_TEMP(0, ${temp_storage.var_fencesprite_se}),
                STORE_TEMP(0, ${temp_storage.var_fencesprite_sw}),

                STORE_TEMP(1, ${temp_storage.var_use_fence_ne}),
                STORE_TEMP(1, ${temp_storage.var_use_fence_nw}),
                STORE_TEMP(1, ${temp_storage.var_use_fence_se}),
                STORE_TEMP(1, ${temp_storage.var_use_fence_sw}),

                STORE_TEMP(0, ${temp_storage.var_fence_offset_ne}),
                STORE_TEMP(0, ${temp_storage.var_fence_offset_nw}),
                STORE_TEMP(0, ${temp_storage.var_fence_offset_se}),
                STORE_TEMP(0, ${temp_storage.var_fence_offset_sw}),
                ]) {
        ${industry.id}_tile_fence_industry;
    }
    <!--! end fence switches -->
</tal:block>